Vamos a preparar el controlador quotationController.js completo paso a paso. Este archivo manejar√°:

üìÑ Crear cotizaci√≥n

üóÇÔ∏è Obtener todas las cotizaciones de un usuario

‚úèÔ∏è Editar cotizaci√≥n

üóëÔ∏è Eliminar cotizaci√≥n

‚úÖ Opcional: Cambiar estatus (aprobado, rechazado, etc.)

üìÅ server/controllers/quotationController.js
js
Copiar
Editar
const { Quotation, User } = require("../models");

// Crear nueva cotizaci√≥n
exports.createQuotation = async (req, res) => {
  try {
    const { clientName, total, status, notes, products } = req.body;

    if (!clientName || !total || !Array.isArray(products)) {
      return res.status(400).json({ message: "Campos requeridos faltantes" });
    }

    const quotation = await Quotation.create({
      clientName,
      total,
      status: status || "pendiente",
      notes: notes || "",
      products,
      userId: req.user.id
    });

    res.status(201).json({ message: "Cotizaci√≥n creada", quotation });

  } catch (error) {
    console.error("‚ùå Error al crear cotizaci√≥n:", error);
    res.status(500).json({ message: "Error interno del servidor" });
  }
};

// Obtener todas las cotizaciones del usuario actual
exports.getUserQuotations = async (req, res) => {
  try {
    const quotations = await Quotation.findAll({
      where: { userId: req.user.id },
      order: [["createdAt", "DESC"]]
    });

    res.json(quotations);

  } catch (error) {
    console.error("‚ùå Error al obtener cotizaciones:", error);
    res.status(500).json({ message: "Error interno del servidor" });
  }
};

// Editar una cotizaci√≥n
exports.updateQuotation = async (req, res) => {
  try {
    const { id } = req.params;
    const { clientName, total, status, notes, products } = req.body;

    const quotation = await Quotation.findOne({
      where: { id, userId: req.user.id }
    });

    if (!quotation) {
      return res.status(404).json({ message: "Cotizaci√≥n no encontrada" });
    }

    await quotation.update({
      clientName,
      total,
      status,
      notes,
      products
    });

    res.json({ message: "Cotizaci√≥n actualizada", quotation });

  } catch (error) {
    console.error("‚ùå Error al actualizar cotizaci√≥n:", error);
    res.status(500).json({ message: "Error interno del servidor" });
  }
};

// Eliminar cotizaci√≥n
exports.deleteQuotation = async (req, res) => {
  try {
    const { id } = req.params;

    const quotation = await Quotation.findOne({
      where: { id, userId: req.user.id }
    });

    if (!quotation) {
      return res.status(404).json({ message: "Cotizaci√≥n no encontrada" });
    }

    await quotation.destroy();
    res.json({ message: "Cotizaci√≥n eliminada correctamente" });

  } catch (error) {
    console.error("‚ùå Error al eliminar cotizaci√≥n:", error);
    res.status(500).json({ message: "Error interno del servidor" });
  }
};

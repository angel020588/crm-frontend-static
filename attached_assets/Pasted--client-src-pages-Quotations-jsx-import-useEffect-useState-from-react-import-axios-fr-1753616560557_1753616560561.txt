// 📁 client/src/pages/Quotations.jsx
import { useEffect, useState } from "react";
import axios from "axios";

export default function Quotations() {
  const [quotations, setQuotations] = useState([]);
  const [clientName, setClientName] = useState("");
  const [details, setDetails] = useState("");
  const [amount, setAmount] = useState("");
  const [status, setStatus] = useState("pendiente");
  const [error, setError] = useState("");

  const token = localStorage.getItem("token");

  const fetchQuotations = async () => {
    try {
      const res = await axios.get("/api/quotations", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setQuotations(res.data);
    } catch (err) {
      setError("Error al cargar cotizaciones");
    }
  };

  const createQuotation = async (e) => {
    e.preventDefault();
    try {
      await axios.post(
        "/api/quotations",
        { clientName, details, amount, status },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setClientName(""); setDetails(""); setAmount(""); setStatus("pendiente");
      fetchQuotations();
    } catch (err) {
      setError("Error al crear cotización");
    }
  };

  const deleteQuotation = async (id) => {
    if (!window.confirm("¿Eliminar esta cotización?")) return;
    try {
      await axios.delete(`/api/quotations/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      fetchQuotations();
    } catch (err) {
      setError("Error al eliminar cotización");
    }
  };

  useEffect(() => { fetchQuotations(); }, []);

  return (
    <div className="p-6 bg-gray-100 min-h-screen">
      <h1 className="text-2xl font-bold mb-4">Mis Cotizaciones</h1>

      {error && <p className="text-red-600 mb-4">{error}</p>}

      <form onSubmit={createQuotation} className="bg-white p-4 rounded shadow mb-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <input type="text" placeholder="Nombre del Cliente" value={clientName} onChange={(e) => setClientName(e.target.value)} required className="border p-2 rounded" />
          <input type="number" placeholder="Monto" value={amount} onChange={(e) => setAmount(e.target.value)} required className="border p-2 rounded" />
          <textarea placeholder="Detalles" value={details} onChange={(e) => setDetails(e.target.value)} required className="border p-2 rounded col-span-2" />
          <select value={status} onChange={(e) => setStatus(e.target.value)} className="border p-2 rounded">
            <option value="pendiente">Pendiente</option>
            <option value="aprobado">Aprobado</option>
            <option value="rechazado">Rechazado</option>
          </select>
        </div>
        <button type="submit" className="mt-4 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
          Agregar Cotización
        </button>
      </form>

      <ul className="space-y-3">
        {quotations.map((q) => (
          <li key={q.id} className="bg-white p-4 rounded shadow flex justify-between items-center">
            <div>
              <p className="font-bold">{q.clientName}</p>
              <p className="text-sm text-gray-600">{q.details}</p>
              <p className="text-sm">💰 ${q.amount} — Estado: {q.status}</p>
            </div>
            <button onClick={() => deleteQuotation(q.id)} className="text-red-600 hover:underline">
              Eliminar
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
}

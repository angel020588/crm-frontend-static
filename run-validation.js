// run-validation.js
// Si est√°s usando el shebang arriba de este comentario puede causar error
// Por seguridad eliminamos la primera l√≠nea "#!/usr/bin/env node"

const { CRMRouteValidator } = require('./validators/route-validator');
const QuickHealthCheck = require('./validators/quick‚Äëhealth‚Äëcheck');
const EndpointTester = require('./test‚Äëall‚Äëendpoints');

async function runAllValidations() {
  console.log('üéØ SISTEMA DE VALIDACI√ìN COMPLETA - CRM PROSELLER');
  console.log('='.repeat(60));
  console.log('Iniciando validaciones autom√°ticas...\n');

  try {
    console.log('üî• PASO 1: VERIFICACI√ìN R√ÅPIDA DE SALUD');
    console.log('-'.repeat(40));
    const healthCheck = new QuickHealthCheck();
    healthCheck.runQuickCheck();

    console.log('\n‚è≥ Esperando 3 segundos antes de continuar...\n');
    await new Promise(resolve => setTimeout(resolve, 3000));

    console.log('üîç PASO 2: VALIDACI√ìN COMPLETA DE RUTAS');
    console.log('-'.repeat(40));
    const routeValidator = new CRMRouteValidator();
    await routeValidator.runCompleteValidation();
    routeValidator.saveReportToFile();

    console.log('\n‚è≥ Esperando 5 segundos antes de probar endpoints...\n');
    await new Promise(resolve => setTimeout(resolve, 5000));

    console.log('üß™ PASO 3: PRUEBA DE ENDPOINTS');
    console.log('-'.repeat(40));
    console.log('‚ÑπÔ∏è  Nota: Aseg√∫rate de que el servidor est√© corriendo en puerto 3000');
    console.log('   Si no est√° corriendo, algunos tests fallar√°n (es normal).\n');

    const endpointTester = new EndpointTester();
    await endpointTester.testAllEndpoints();

    console.log('\nüéâ VALIDACI√ìN COMPLETA TERMINADA');
    console.log('='.repeat(60));
    console.log('‚úÖ Todos los validadores han terminado');
    console.log('üìÑ Revisa los reportes generados para m√°s detalles');
    console.log('üîß Corrige cualquier problema encontrado');
    console.log('='.repeat(60));

  } catch (error) {
    console.error('\n‚ùå Error durante la validaci√≥n:', error.message);
    console.error('üîß Verifica que todos los archivos est√©n en su lugar');
  }
}

async function runBasicValidation() {
  console.log('‚ö° VALIDACI√ìN B√ÅSICA - CRM PROSELLER');
  console.log('='.repeat(40));
  const healthCheck = new QuickHealthCheck();
  healthCheck.runQuickCheck();
}

async function runEndpointTests() {
  console.log('üß™ PRUEBA DE ENDPOINTS - CRM PROSELLER');
  console.log('='.repeat(40));
  const tester = new EndpointTester();
  await tester.testAllEndpoints();
}

if (require.main === module) {
  const args = process.argv.slice(2);
  if (args.includes('--basic')) {
    runBasicValidation();
  } else if (args.includes('--endpoints')) {
    runEndpointTests();
  } else if (args.includes('--help')) {
    console.log('üéØ SISTEMA DE VALIDACI√ìN CRM PROSELLER');
    console.log('=====================================');
    console.log('Uso: node run-validation.js [opciones]');
    console.log('');
    console.log('Opciones:');
    console.log('  --basic      Solo verificaci√≥n r√°pida');
    console.log('  --endpoints  Solo prueba de endpoints');
    console.log('  --help       Mostrar esta ayuda');
    console.log('  (sin args)   Ejecutar validaci√≥n completa');
  } else {
    runAllValidations();
  }
}

module.exports = {
  runAllValidations,
  runBasicValidation,
  runEndpointTests
};
